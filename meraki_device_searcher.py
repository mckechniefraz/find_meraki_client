import argparse
import sys
import meraki
import pandas
from IPython.display import display
from tqdm import tqdm


def merakiError(e):
    """
        Function to print the error generated by Meraki's SDK during any API call made to via the SDK with a try logic attached.

        Args:
                e (String): Error message generated and formatted by the Meraki SDK.
        """

    print(f"Meraki API error: {e}")


def pythonError(e):
    """
        Function to print the error generated by Python during any API calls made with a try logic attached.

        Args:
                e (String): Python Error message.
        """

    print(f"Python API error: {e}")


def checkArg(args):
    """
    This function takes the arguments provided at run-time and returns them in a structure to map to set variables.

    Args:
        args (NoneType): All the arguments which are provided as part of the run-time arguments.
    """
    parser = argparse.ArgumentParser(
        description='Meraki Find Client Arguments')
    parser.add_argument("--k", metavar="API Key", type=str,
                        help="API Key for Meraki Dashboard")
    parser.add_argument("--o", metavar="Org ID", type=str,
                        help="Organisation ID for the Meraki Dashboard")
    parser.add_argument("--i", metavar="Client IP", type=str,
                        help="Client IP you are searching for")

    arguments = parser.parse_args()

    return(arguments.k, arguments.o, arguments.i)


def getNetworkList(orgId):
    """
        This function takes the orgId variable and uses it to make a API call to Meraki requesting a lit of all networks associated to
        the Organization.

        As this is key to the rest of the script, if either a Meraki or Python error is returned during the API call the script is stoped.

        Args:
                orgId (String): Unique Organization ID used by Meraki to destiguish the Organization the API request is for.

        Returns:
                networkList [List]: Returns a dictionary with all the network information returned during the API call.
        """

    networkList = []

    try:
        networkList = dashboard.organizations.getOrganizationNetworks(
            organizationId=orgId, total_pages="all")
    except meraki.APIError as e:
        merakiError(e)
        sys.exit(1)

    except Exception as e:
        pythonError(e)
        sys.exit(1)

    return networkList


def getNetworkClients(networkId, clientIp):
    """
    Function which will take the arguments networkId and clientIp to see if any clients have connected to the network with that IP in the last 30 days.

    Args:
        networkId (string): Meraki's unique network ID for the network to search.
        clientIp (string): Client IP which was provided at run-time that is being searched for.

    Returns:
        clients (list): list of all clients which have an the IP address being searched for in the last 30 days.
    """

    clients = dashboard.networks.getNetworkClients(
        networkId=networkId, total_pages="all", timespan=2678400, ip=clientIp)

    return clients


if "__main__" == __name__:
    """
    This is the core of the script which is triggered whent the script is ran, it will take in the three arguments provided
    at run time and then find all clients with a matching IP address from the last 30 days.
    """
    # setting the api key, organisation ID and client IP based on arguments provided.
    apiKey, orgId, clientIp = checkArg(sys.argv)

    # Setting log file path
    log_file = "logs"

    # Setting up the Meraki SDK Module.
    dashboard = meraki.DashboardAPI(api_key=apiKey,
                                    print_console=False,
                                    log_path=log_file,
                                    retry_4xx_error=True)

    networkList = getNetworkList(orgId=orgId)
    clientList = {"networkName": [], "clientIp": [],
                  "clientName": [], "cleintMac": [], "connectionType": [], "firstSeen": [], "lastSeen": [], }

    for network in tqdm(networkList):
        clients = getNetworkClients(
            networkId=network["id"], clientIp=clientIp)

        if len(clients) != 0:
            for client in clients:
                clientList["networkName"].append(network["name"])
                clientList["clientIp"].append(client["ip"])
                clientList["clientName"].append(client["description"])
                clientList["cleintMac"].append(client["mac"])
                clientList["connectionType"].append(
                    client["recentDeviceConnection"])
                clientList["firstSeen"].append(client["firstSeen"])
                clientList["lastSeen"].append(client["lastSeen"])

    df = pandas.DataFrame.from_dict(clientList)
    display(df)
